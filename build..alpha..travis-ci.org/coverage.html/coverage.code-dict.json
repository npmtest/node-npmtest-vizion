{"/home/travis/build/npmtest/node-npmtest-vizion/test.js":"/* istanbul instrument in package npmtest_vizion */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vizion/lib.npmtest_vizion.js":"/* istanbul instrument in package npmtest_vizion */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vizion = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vizion = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vizion/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vizion && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vizion */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vizion\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vizion.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vizion.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vizion.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vizion.__dirname + '/lib.npmtest_vizion.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vizion/node_modules/vizion/index.js":"module.exports = require('./lib/vizion.js');\n","/home/travis/build/npmtest/node-npmtest-vizion/node_modules/vizion/lib/vizion.js":"var ALL = {};\nvar vizion = {};\n\nALL.hg = require('./hg.js');\nALL.git = require('./git.js');\nALL.svn = require('./svn.js');\n// Add more revision control tools here\nvar identify = require('./identify.js');\n\n\nvizion.analyze = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  if (process.platform === 'win32' || process.platform === 'win64')\n    return cb('vizion is not yet compatible with Windows.');\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].parse(folder, cb);\n    else\n      return cb('Error vizion::analyze() for given folder: '+folder);\n  });\n};\n\nvizion.isUpToDate = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].isUpdated(folder, cb);\n    else\n      return cb('Error vizion::isUpToDate() for given folder: '+folder);\n  });\n};\n\nvizion.update = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].update(folder, cb);\n    else\n      return cb('Error vizion::update() for given folder: '+folder);\n  });\n};\n\nvizion.revertTo = function(argv, cb) {\n  var revision = (argv.revision) ? argv.revision : false;\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  if (!revision)\n    return cb({msg: 'Cannot revert to an invalid commit revision', path: _folder});\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].revert({folder: folder, revision: revision}, cb);\n    else\n      return cb('Error vizion::analyze() for given folder: '+folder);\n  });\n};\n\nvizion.prev = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].prev(folder, cb);\n    else\n      return cb('Error vizion::prev() for given folder: '+folder);\n  });\n};\n\nvizion.next = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].next(folder, cb);\n    else\n      return cb('Error vizion::next() for given folder: '+folder);\n  });\n};\n\n\nmodule.exports = vizion;\n","/home/travis/build/npmtest/node-npmtest-vizion/node_modules/vizion/lib/hg.js":"var exec = require(\"child_process\").exec;\n\nvar fs   = require(\"fs\");\n\nvar halt = false;\n\nfunction error(repoType, task, errorMsg, cb) {\n\tif (halt) return false;\n\n\tconsole.error(\"[Repo-Parser] An error occured while \" + task + \" in a \" + repoType + \" repository: \" + errorMsg);\n\thalt = true;\n  return cb(\"[Repo-Parser] An error occured while \" + task + \" in a \" + repoType + \" repository: \" + errorMsg);\n}\n\nfunction checkReturn(dataArray, cb) {\n\tif (halt) {\n\t\treturn false;\n\t}\n\tif (Object.keys(dataArray).length > 6) {\n    Object.keys(dataArray).forEach(function(key) {\n      if (typeof(dataArray[key]) === 'string') {\n        dataArray[key] = dataArray[key].replace(/\\n/g, '');\n      }\n    });\n\t\tcb(null, dataArray);\n\t}\n};\n\n\nmodule.exports.parse = function parseHg(folder, cb) {\n\tvar data = {};\n\n  data.type = 'mercurial';\n  data.commit_history = []; // temporary\n\n\texec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 hg paths default\", function(err, stdout, stderr) {\n\t\tif(err !== null) {\n\t\t\terror(\"mercurial\", \"fetching path\", stderr, cb);\n\t\t}\n\t\telse {\n\t\t\tdata.url = stdout;\n\t\t\tcheckReturn(data, cb);\n\t\t}\n\t});\n\texec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 hg log --limit 1 --template 'changeset: {rev}:{node|short}\\nsummary: {desc}'\", function(err, stdout, stderr) {\n\t\tif(err !== null) {\n\t\t\terror(\"mercurial\", \"fetching log\", stderr, cb);\n\t\t}\n\t\telse {\n\t\t\tvar changeset = stdout.match(/^changeset:\\s+([^\\n]+)$/m);\n\t\t\t//date = stdout.match(/^date:\\s+:([^\\n]+)$/m);\n\t\t\tvar summary = stdout.match(/^summary:\\s+([^\\n]+)$/m);\n\t\t\tdata.revision = changeset[1];\n\t\t\tdata.comment = summary[1];\n\t\t\t//data.update_time = date;\n\t\t\tcheckReturn(data, cb);\n\t\t}\n\t});\n\texec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 hg branch\", function(err, stdout, stderr) {\n\t\tif(err !== null) {\n\t\t\terror(\"mercurial\", \"fetching branch\", stderr, cb);\n\t\t}\n\t\telse {\n\t\t\tdata.branch = stdout;\n\t\t\tcheckReturn(data, cb);\n\t\t}\n\t});\n\tfs.stat(folder+\".hg\", function(err, stats) {\n\t\tif(err !== null) {\n\t\t\terror(\"mercurial\", \"fetching stats\", \"no error available\", cb);\n\t\t}\n\t\telse {\n\t\t\tdata.update_time = stats.mtime;\n\t\t\tcheckReturn(data, cb);\n\t\t}\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-vizion/node_modules/vizion/lib/git.js":"var fs = require('fs');\nvar async = require('async');\nvar exec = require('child_process').exec;\n\nvar git = {};\n\nvar TIMEOUT = 5000;\nvar MAXBUFFER = 1024 * 64; // 16KB\n\ngit.parse = function(folder, cb) {\n  var myTrim = function(str) {\n    if (typeof(str) === 'string')\n      return str.replace(/\\n/g, '');\n    return str;\n  };\n\n  var getUrl = function(cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git config --get remote.origin.url\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var data = {};\n      data.type = 'git';\n      data.url = myTrim(stdout);\n      return cb(null, data);\n    });\n  };\n\n  var getMeta = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git show --quiet --format=%H%n%aD%n%s%n%B HEAD\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var lines = stdout.split(\"\\n\");\n      data.revision = myTrim(lines.shift());\n      data.update_time = myTrim(lines.shift());\n      data.comment = myTrim(lines.shift());\n      return cb(null, data);\n    });\n  };\n\n  var getStaged = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git status -s\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      data.unstaged = (stdout === '') ? false : true;\n      return cb(null, data);\n    });\n  };\n\n  var getBranch = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git rev-parse --abbrev-ref HEAD\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      data.branch = myTrim(stdout);\n      return cb(null, data);\n    });\n  };\n\n  var getRemote = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git remote\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      data.remotes = stdout.split('\\n');\n      data.remotes.pop();\n      data.remote = (data.remotes.indexOf('origin') === -1)\n                    ? data.remotes[0] : 'origin';\n      return cb(null, data);\n    });\n  };\n\n  var getRemoteBrancheExistence = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git show-ref refs/remotes/\"+data.remote+\"/\"+data.branch, {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n         function(err, stdout, stderr) {\n      if (err)\n        data.branch_exists_on_remote = false;\n      else\n        data.branch_exists_on_remote = true;\n\n      return cb(null, data);\n    });\n  };\n\n  var getPrevNext = function(data, cb) {\n    var prefix = '';\n\n    if (data.branch_exists_on_remote)\n      prefix = data.remote + '/';\n\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git log \"+ prefix + data.branch +\" --pretty=oneline -n 100\",\n         {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var commit_history = [];\n      var lines = stdout.split('\\n');\n\n      lines.forEach(function(key) {\n        var parse = key.match(/([^ ]*) (.*)/);\n        if (parse)\n          commit_history.push(parse[1]);\n      });\n\n      var current = commit_history.indexOf(data.revision);\n      data.ahead = false;\n      data.next_rev = null;\n      data.prev_rev = null;\n      if (current === -1) {\n        data.ahead = true;\n      }\n      else {\n        data.next_rev = (current === 0) ? null : commit_history[current - 1];\n        data.prev_rev = (current === (commit_history.length - 1)) ? null : commit_history[current + 1];\n      }\n      return cb(null, data);\n    });\n  };\n\n  var getDate = function(data, cb) {\n    fs.stat(folder+\".git\", function(err, stats) {\n      if(err !== null)\n        return cb(err);\n      data.update_time = myTrim(stats.mtime);\n      return cb(null, data);\n    });\n  };\n\n  var getTags = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git tag\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if (err !== null)\n        return cb(err);\n      if (stdout.length) {\n        data.tags = stdout.split('\\n');\n        data.tags.pop();\n        data.tags = data.tags.slice(0, 10);\n      }\n      return cb(null, data);\n    });\n  };\n\n  async.waterfall([getUrl, getMeta, getStaged, getBranch, getRemote, getRemoteBrancheExistence, getPrevNext, getDate, getTags],\n  function(err, data) {\n    if (err !== null)\n      return cb(err);\n    return cb(null, data);\n  });\n};\n\ngit.isUpdated = function(folder, cb) {\n  git.parse(folder, function(err, data) {\n    var prefix = '';\n\n    if (err !== null)\n      return cb(err);\n\n    if (data.branch_exists_on_remote)\n      prefix = data.remote + '/';\n\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git remote update >> /dev/null 2>&1; git log \"+ prefix+data.branch+\n         \" --pretty=oneline -n 1\", {timeout: 60000, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n           var res = {};\n\n           if(err !== null)\n             return cb(err);\n           if (stdout.substring(0, 40) === data.revision.substring(0, 40))\n             res.is_up_to_date = true;\n           else\n             res.is_up_to_date = false;\n           res.new_revision = stdout.substring(0, 40);\n           res.current_revision = data.revision.substring(0, 40);\n           return cb(null, res);\n    });\n  });\n};\n\ngit.revert = function(args, cb) {\n  var ret = {};\n  var command = \"cd '\"+args.folder+\"';LC_ALL=en_US.UTF-8 git reset --hard \"+args.revision;\n  ret.output = '';\n  ret.output += command + '\\n';\n  ret.success = true;\n  exec(command, {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n  function(err, stdout, stderr) {\n    ret.output += stdout;\n    if (err !== null || stderr.substring(0, 6) === 'fatal:')\n      ret.success = false;\n    return cb(null, ret);\n  });\n};\n\ngit.update = function(folder, cb) {\n  git.isUpdated(folder, function(err, data) {\n    var res = {};\n    if (err !== null)\n      return cb(err);\n    if (data.is_up_to_date === true) {\n      res.success = false;\n      res.current_revision = data.new_revision;\n      return cb(null, res);\n    }\n    else {\n      git.revert({folder: folder, revision: data.new_revision},\n      function (err, dt) {\n        if (err !== null)\n          return cb(err);\n        res.output = dt.output;\n        res.success = dt.success;\n        res.current_revision = (dt.success) ? data.new_revision : data.current_revision;\n        return cb(null, res);\n      });\n    }\n  });\n};\n\ngit.prev = function(folder, cb) {\n  git.parse(folder, function(err, data) {\n    if (err !== null)\n      return cb(err);\n    var res = {};\n    if (data.prev_rev !== null) {\n      git.revert({folder: folder, revision: data.prev_rev}, function(err, meta){\n        if (err !== null)\n          return cb(err);\n        res.output = meta.output;\n        res.success = meta.success;\n        res.current_revision = (res.success) ? data.prev_rev : data.revision;\n        return cb(null, res);\n      });\n    }\n    else {\n      res.success = false;\n      res.current_revision = data.revision;\n      return cb(null, res);\n    }\n  });\n};\n\ngit.next = function(folder, cb) {\n  git.parse(folder, function(err, data) {\n    if (err !== null)\n      return cb(err);\n    var res = {};\n    if (data.next_rev !== null) {\n      git.revert({folder: folder, revision: data.next_rev}, function(err, meta){\n        if (err !== null)\n          return cb(err);\n        res.output = meta.output;\n        res.success = meta.success;\n        res.current_revision = (res.success) ? data.next_rev : data.revision;\n        return cb(null, res);\n      });\n    }\n    else {\n      res.success = false;\n      res.current_revision = data.revision;\n      return cb(null, res);\n    }\n  });\n};\n\nmodule.exports = git;\n","/home/travis/build/npmtest/node-npmtest-vizion/node_modules/vizion/lib/svn.js":"var fs = require('fs');\nvar async = require('async');\nvar exec = require('child_process').exec;\n\nvar svn = {};\n\nsvn.parse = function(folder, cb) {\n  var getMeta = function(cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn info\", function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var data = {};\n      data.type = 'svn';\n      data.url = stdout.match(/Repository Root: ([^\\n]+)/);\n      if (data.url && typeof(data.url) === 'object') {\n        data.url = data.url[1];\n        data.branch = typeof(data.url) === 'string' ? data.url.match(/[^/]+$/) : null;\n      }\n      if (data.branch) data.branch = data.branch[0];\n      return cb(null, data);\n    });\n  }\n\n  var getRevComment = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn log -r BASE\", function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      data.revision = stdout.match(/^(r[0-9]+)\\s\\|/m);\n      data.comment = stdout.match(/lines?\\s*\\n((.|\\n)*)\\n-{72}\\n$/);\n      if (data.revision) data.revision = data.revision[1];\n      if (data.comment) data.comment = data.comment[1].replace(/\\n/g, '');\n      cb(null, data);\n    });\n  }\n\n  var getDate = function(data, cb) {\n    fs.stat(folder+\".svn\", function(err, stats) {\n      if(err !== null)\n        return cb(err);\n      data.update_time = stats.mtime;\n      return cb(null, data);\n    });\n  }\n\n  async.waterfall([getMeta, getRevComment, getDate],\n  function(err, data) {\n    if (err !== null)\n      return cb(err);\n    return cb(null, data);\n  });\n}\n\nsvn.isUpdated = function(folder, cb) {\n  var res = {};\n\n  var getRev = function(str) {\n    var matches = str.match(/Changed Rev: ([^\\n]+)/);\n    if (matches) matches = matches[1];\n    return matches;\n  }\n\n  exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn info\", function(err, stdout, stderr) {\n    if(err !== null)\n      return cb(err);\n    var current_rev = getRev(stdout);\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn info -r HEAD\", function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var recent_rev = getRev(stdout);\n      res.is_up_to_date = (recent_rev === current_rev);\n      res.new_revision = recent_rev;\n      res.current_revision = current_rev;\n      return cb(null, res);\n    });\n  });\n}\n\nsvn.update = function(folder, cb) {\n  var res = {};\n\n  exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn update\", function(err, stdout, stderr) {\n    if(err !== null)\n      return cb(err);\n    var new_rev = stdout.match(/Updated to revision ([^\\.]+)/);\n    if (new_rev === null)\n    {\n      res.success = false;\n      var old_rev = stdout.match(/At revision ([^\\.]+)/);\n      res.current_revision = (old_rev) ? old_rev[1] : null;\n    }\n    else {\n      res.success = true;\n      res.current_revision = new_rev[1];\n    }\n    return cb(null, res);\n  });\n}\n\nmodule.exports = svn;\n","/home/travis/build/npmtest/node-npmtest-vizion/node_modules/vizion/lib/identify.js":"var fs = require('fs');\nvar async = require('async');\n\nmodule.exports = function(folder, cb) {\n  if (folder[folder.length - 1] !== '/')\n    folder += '/';\n\n  async.eachSeries(['git', 'hg', 'svn'],\n  function(type, callback) {\n    fs.exists(folder+'.'+type, function(exists) {\n      if (exists)\n        return callback(type);\n      else\n        return callback();\n    });\n  },\n  function(final) {\n    return cb(final ? final : 'No versioning system found', folder);\n  });\n};\n"}